/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Followers } from "./Followers";
import { FollowersCountArgs } from "./FollowersCountArgs";
import { FollowersFindManyArgs } from "./FollowersFindManyArgs";
import { FollowersFindUniqueArgs } from "./FollowersFindUniqueArgs";
import { CreateFollowersArgs } from "./CreateFollowersArgs";
import { UpdateFollowersArgs } from "./UpdateFollowersArgs";
import { DeleteFollowersArgs } from "./DeleteFollowersArgs";
import { FollowersService } from "../followers.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Followers)
export class FollowersResolverBase {
  constructor(
    protected readonly service: FollowersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  async _followersItemsMeta(
    @graphql.Args() args: FollowersCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Followers])
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  async followersItems(
    @graphql.Args() args: FollowersFindManyArgs
  ): Promise<Followers[]> {
    return this.service.followersItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Followers, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "own",
  })
  async followers(
    @graphql.Args() args: FollowersFindUniqueArgs
  ): Promise<Followers | null> {
    const result = await this.service.followers(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Followers)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "create",
    possession: "any",
  })
  async createFollowers(
    @graphql.Args() args: CreateFollowersArgs
  ): Promise<Followers> {
    return await this.service.createFollowers({
      ...args,
      data: {
        ...args.data,

        follower: args.data.follower
          ? {
              connect: args.data.follower,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Followers)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "update",
    possession: "any",
  })
  async updateFollowers(
    @graphql.Args() args: UpdateFollowersArgs
  ): Promise<Followers | null> {
    try {
      return await this.service.updateFollowers({
        ...args,
        data: {
          ...args.data,

          follower: args.data.follower
            ? {
                connect: args.data.follower,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Followers)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "delete",
    possession: "any",
  })
  async deleteFollowers(
    @graphql.Args() args: DeleteFollowersArgs
  ): Promise<Followers | null> {
    try {
      return await this.service.deleteFollowers(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Followers], { name: "followersItems" })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  async findFollowersItems(
    @graphql.Parent() parent: Followers,
    @graphql.Args() args: FollowersFindManyArgs
  ): Promise<Followers[]> {
    const results = await this.service.findFollowersItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Followers, {
    nullable: true,
    name: "follower",
  })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  async getFollower(
    @graphql.Parent() parent: Followers
  ): Promise<Followers | null> {
    const result = await this.service.getFollower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
