/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FollowersService } from "../followers.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FollowersCreateInput } from "./FollowersCreateInput";
import { Followers } from "./Followers";
import { FollowersFindManyArgs } from "./FollowersFindManyArgs";
import { FollowersWhereUniqueInput } from "./FollowersWhereUniqueInput";
import { FollowersUpdateInput } from "./FollowersUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FollowersControllerBase {
  constructor(
    protected readonly service: FollowersService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Followers })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: FollowersCreateInput,
  })
  async createFollowers(
    @common.Body() data: FollowersCreateInput
  ): Promise<Followers> {
    return await this.service.createFollowers({
      data: {
        ...data,

        follower: data.follower
          ? {
              connect: data.follower,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Followers] })
  @ApiNestedQuery(FollowersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async followersItems(@common.Req() request: Request): Promise<Followers[]> {
    const args = plainToClass(FollowersFindManyArgs, request.query);
    return this.service.followersItems({
      ...args,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Followers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async followers(
    @common.Param() params: FollowersWhereUniqueInput
  ): Promise<Followers | null> {
    const result = await this.service.followers({
      where: params,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Followers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: FollowersUpdateInput,
  })
  async updateFollowers(
    @common.Param() params: FollowersWhereUniqueInput,
    @common.Body() data: FollowersUpdateInput
  ): Promise<Followers | null> {
    try {
      return await this.service.updateFollowers({
        where: params,
        data: {
          ...data,

          follower: data.follower
            ? {
                connect: data.follower,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          follower: {
            select: {
              id: true,
            },
          },

          following: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Followers })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFollowers(
    @common.Param() params: FollowersWhereUniqueInput
  ): Promise<Followers | null> {
    try {
      return await this.service.deleteFollowers({
        where: params,
        select: {
          createdAt: true,

          follower: {
            select: {
              id: true,
            },
          },

          following: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/followersItems")
  @ApiNestedQuery(FollowersFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "read",
    possession: "any",
  })
  async findFollowersItems(
    @common.Req() request: Request,
    @common.Param() params: FollowersWhereUniqueInput
  ): Promise<Followers[]> {
    const query = plainToClass(FollowersFindManyArgs, request.query);
    const results = await this.service.findFollowersItems(params.id, {
      ...query,
      select: {
        createdAt: true,

        follower: {
          select: {
            id: true,
          },
        },

        following: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/followersItems")
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "update",
    possession: "any",
  })
  async connectFollowersItems(
    @common.Param() params: FollowersWhereUniqueInput,
    @common.Body() body: FollowersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followersItems: {
        connect: body,
      },
    };
    await this.service.updateFollowers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/followersItems")
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "update",
    possession: "any",
  })
  async updateFollowersItems(
    @common.Param() params: FollowersWhereUniqueInput,
    @common.Body() body: FollowersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followersItems: {
        set: body,
      },
    };
    await this.service.updateFollowers({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/followersItems")
  @nestAccessControl.UseRoles({
    resource: "Followers",
    action: "update",
    possession: "any",
  })
  async disconnectFollowersItems(
    @common.Param() params: FollowersWhereUniqueInput,
    @common.Body() body: FollowersWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      followersItems: {
        disconnect: body,
      },
    };
    await this.service.updateFollowers({
      where: params,
      data,
      select: { id: true },
    });
  }
}
