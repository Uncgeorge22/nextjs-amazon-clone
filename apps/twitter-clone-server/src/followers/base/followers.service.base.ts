/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Followers as PrismaFollowers } from "@prisma/client";

export class FollowersServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FollowersCountArgs, "select">
  ): Promise<number> {
    return this.prisma.followers.count(args);
  }

  async followersItems(
    args: Prisma.FollowersFindManyArgs
  ): Promise<PrismaFollowers[]> {
    return this.prisma.followers.findMany(args);
  }
  async followers(
    args: Prisma.FollowersFindUniqueArgs
  ): Promise<PrismaFollowers | null> {
    return this.prisma.followers.findUnique(args);
  }
  async createFollowers(
    args: Prisma.FollowersCreateArgs
  ): Promise<PrismaFollowers> {
    return this.prisma.followers.create(args);
  }
  async updateFollowers(
    args: Prisma.FollowersUpdateArgs
  ): Promise<PrismaFollowers> {
    return this.prisma.followers.update(args);
  }
  async deleteFollowers(
    args: Prisma.FollowersDeleteArgs
  ): Promise<PrismaFollowers> {
    return this.prisma.followers.delete(args);
  }

  async findFollowersItems(
    parentId: string,
    args: Prisma.FollowersFindManyArgs
  ): Promise<PrismaFollowers[]> {
    return this.prisma.followers
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .followersItems(args);
  }

  async getFollower(parentId: string): Promise<PrismaFollowers | null> {
    return this.prisma.followers
      .findUnique({
        where: { id: parentId },
      })
      .follower();
  }
}
