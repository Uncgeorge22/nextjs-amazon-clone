/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tweets } from "./Tweets";
import { TweetsCountArgs } from "./TweetsCountArgs";
import { TweetsFindManyArgs } from "./TweetsFindManyArgs";
import { TweetsFindUniqueArgs } from "./TweetsFindUniqueArgs";
import { CreateTweetsArgs } from "./CreateTweetsArgs";
import { UpdateTweetsArgs } from "./UpdateTweetsArgs";
import { DeleteTweetsArgs } from "./DeleteTweetsArgs";
import { LikesFindManyArgs } from "../../likes/base/LikesFindManyArgs";
import { Likes } from "../../likes/base/Likes";
import { TweetsService } from "../tweets.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tweets)
export class TweetsResolverBase {
  constructor(
    protected readonly service: TweetsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "read",
    possession: "any",
  })
  async _tweetsItemsMeta(
    @graphql.Args() args: TweetsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tweets])
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "read",
    possession: "any",
  })
  async tweetsItems(
    @graphql.Args() args: TweetsFindManyArgs
  ): Promise<Tweets[]> {
    return this.service.tweetsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tweets, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "read",
    possession: "own",
  })
  async tweets(
    @graphql.Args() args: TweetsFindUniqueArgs
  ): Promise<Tweets | null> {
    const result = await this.service.tweets(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tweets)
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "create",
    possession: "any",
  })
  async createTweets(@graphql.Args() args: CreateTweetsArgs): Promise<Tweets> {
    return await this.service.createTweets({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tweets)
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "update",
    possession: "any",
  })
  async updateTweets(
    @graphql.Args() args: UpdateTweetsArgs
  ): Promise<Tweets | null> {
    try {
      return await this.service.updateTweets({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tweets)
  @nestAccessControl.UseRoles({
    resource: "Tweets",
    action: "delete",
    possession: "any",
  })
  async deleteTweets(
    @graphql.Args() args: DeleteTweetsArgs
  ): Promise<Tweets | null> {
    try {
      return await this.service.deleteTweets(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Likes], { name: "likesItems" })
  @nestAccessControl.UseRoles({
    resource: "Likes",
    action: "read",
    possession: "any",
  })
  async findLikesItems(
    @graphql.Parent() parent: Tweets,
    @graphql.Args() args: LikesFindManyArgs
  ): Promise<Likes[]> {
    const results = await this.service.findLikesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
